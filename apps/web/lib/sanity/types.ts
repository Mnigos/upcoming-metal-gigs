/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export interface SanityImagePaletteSwatch {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export interface SanityImagePalette {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export interface SanityImageDimensions {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export interface SanityImageHotspot {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export interface SanityImageCrop {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export interface SanityFileAsset {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export interface SanityImageAsset {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export interface SanityImageMetadata {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export interface Geopoint {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export interface Slug {
  _type: 'slug'
  current?: string
  source?: string
}

export interface SanityAssetSourceData {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export interface Gig {
  _id: string
  _type: 'gig'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  artists?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'artist'
  }[]
  venue?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'venue'
  }
}

export interface Venue {
  _id: string
  _type: 'venue'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  city?: string
}

export interface Artist {
  _id: string
  _type: 'artist'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData
  | Gig
  | Venue
  | Artist
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ../web/app/page.tsx
// Variable: GIGS_QUERY
// Query: *[_type == "gig"]{_id, name, venue -> { name, city }, artists[] -> { name } }
export type GIGS_QUERYResult = {
  _id: string
  name: string | null
  venue: {
    name: string | null
    city: string | null
  } | null
  artists:
    | {
        name: string | null
      }[]
    | null
}[]

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
  interface SanityQueries {
    '*[_type == "gig"]{_id, name, venue -> { name, city }, artists[] -> { name } }': GIGS_QUERYResult
  }
}
